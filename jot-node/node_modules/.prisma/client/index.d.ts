
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.13.0
 * Query Engine version: 833ab05d2a20e822f6736a39a27de4fc8f6b3e49
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



/**
 * Used by group by
 */
export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model Link
 */

export type Link = {
  id: number
  createdAt: Date
  description: string
  url: string
}

/**
 * Model Note
 */

export type Note = {
  id: number
  body: string
  tag: string
  time: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Links
 * const links = await prisma.link.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Links
   * const links = await prisma.link.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.link`: Exposes CRUD operations for the **Link** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Links
    * const links = await prisma.link.findMany()
    * ```
    */
  get link(): Prisma.LinkDelegate;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.13.0
   * Query Engine version: 833ab05d2a20e822f6736a39a27de4fc8f6b3e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



  /**
   * Used by group by
   */
  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Link: 'Link',
    Note: 'Note'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Link
   */


  export type AggregateLink = {
    count: number | null
    avg: LinkAvgAggregateOutputType | null
    sum: LinkSumAggregateOutputType | null
    min: LinkMinAggregateOutputType | null
    max: LinkMaxAggregateOutputType | null
  }

  export type LinkAvgAggregateOutputType = {
    id: number
  }

  export type LinkSumAggregateOutputType = {
    id: number
  }

  export type LinkMinAggregateOutputType = {
    id: number
    createdAt: Date | null
    description: string | null
    url: string | null
  }

  export type LinkMaxAggregateOutputType = {
    id: number
    createdAt: Date | null
    description: string | null
    url: string | null
  }

  export type LinkCountAggregateOutputType = {
    id: number
    createdAt: number | null
    description: number | null
    url: number | null
    _all: number
  }


  export type LinkAvgAggregateInputType = {
    id?: true
  }

  export type LinkSumAggregateInputType = {
    id?: true
  }

  export type LinkMinAggregateInputType = {
    id?: true
    createdAt?: true
    description?: true
    url?: true
  }

  export type LinkMaxAggregateInputType = {
    id?: true
    createdAt?: true
    description?: true
    url?: true
  }

  export type LinkCountAggregateInputType = {
    id?: true
    createdAt?: true
    description?: true
    url?: true
    _all?: true
  }

  export type AggregateLinkArgs = {
    where?: LinkWhereInput
    orderBy?: Enumerable<LinkOrderByInput>
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: LinkAvgAggregateInputType
    sum?: LinkSumAggregateInputType
    min?: LinkMinAggregateInputType
    max?: LinkMaxAggregateInputType
  }

  export type GetLinkAggregateType<T extends AggregateLinkArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetLinkAggregateScalarType<T[P]>
  }

  export type GetLinkAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof LinkAvgAggregateOutputType ? LinkAvgAggregateOutputType[P] : never
  }

    



  export type LinkSelect = {
    id?: boolean
    createdAt?: boolean
    description?: boolean
    url?: boolean
  }

  export type LinkGetPayload<
    S extends boolean | null | undefined | LinkArgs,
    U = keyof S
      > = S extends true
        ? Link
    : S extends undefined
    ? never
    : S extends LinkArgs | FindManyLinkArgs
    ?'include' extends U
    ? Link 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Link ?Link [P]
  : 
     never
  } 
    : Link
  : Link


  export interface LinkDelegate {
    /**
     * Find zero or one Link that matches the filter.
     * @param {FindUniqueLinkArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueLinkArgs>(
      args: Subset<T, FindUniqueLinkArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link | null>, Prisma__LinkClient<LinkGetPayload<T> | null>>
    /**
     * Find the first Link that matches the filter.
     * @param {FindFirstLinkArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstLinkArgs>(
      args?: Subset<T, FindFirstLinkArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link | null>, Prisma__LinkClient<LinkGetPayload<T> | null>>
    /**
     * Find zero or more Links that matches the filter.
     * @param {FindManyLinkArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Links
     * const links = await prisma.link.findMany()
     * 
     * // Get first 10 Links
     * const links = await prisma.link.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const linkWithIdOnly = await prisma.link.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyLinkArgs>(
      args?: Subset<T, FindManyLinkArgs>
    ): CheckSelect<T, Promise<Array<Link>>, Promise<Array<LinkGetPayload<T>>>>
    /**
     * Create a Link.
     * @param {LinkCreateArgs} args - Arguments to create a Link.
     * @example
     * // Create one Link
     * const Link = await prisma.link.create({
     *   data: {
     *     // ... data to create a Link
     *   }
     * })
     * 
    **/
    create<T extends LinkCreateArgs>(
      args: Subset<T, LinkCreateArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link>, Prisma__LinkClient<LinkGetPayload<T>>>
    /**
     * Delete a Link.
     * @param {LinkDeleteArgs} args - Arguments to delete one Link.
     * @example
     * // Delete one Link
     * const Link = await prisma.link.delete({
     *   where: {
     *     // ... filter to delete one Link
     *   }
     * })
     * 
    **/
    delete<T extends LinkDeleteArgs>(
      args: Subset<T, LinkDeleteArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link>, Prisma__LinkClient<LinkGetPayload<T>>>
    /**
     * Update one Link.
     * @param {LinkUpdateArgs} args - Arguments to update one Link.
     * @example
     * // Update one Link
     * const link = await prisma.link.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LinkUpdateArgs>(
      args: Subset<T, LinkUpdateArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link>, Prisma__LinkClient<LinkGetPayload<T>>>
    /**
     * Delete zero or more Links.
     * @param {LinkDeleteManyArgs} args - Arguments to filter Links to delete.
     * @example
     * // Delete a few Links
     * const { count } = await prisma.link.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LinkDeleteManyArgs>(
      args?: Subset<T, LinkDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Links.
     * @param {LinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Links
     * const link = await prisma.link.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LinkUpdateManyArgs>(
      args: Subset<T, LinkUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Link.
     * @param {LinkUpsertArgs} args - Arguments to update or create a Link.
     * @example
     * // Update or create a Link
     * const link = await prisma.link.upsert({
     *   create: {
     *     // ... data to create a Link
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Link we want to update
     *   }
     * })
    **/
    upsert<T extends LinkUpsertArgs>(
      args: Subset<T, LinkUpsertArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link>, Prisma__LinkClient<LinkGetPayload<T>>>
    /**
     * Find zero or one Link that matches the filter.
     * @param {FindUniqueLinkArgs} args - Arguments to find a Link
     * @deprecated This will be deprecated please use prisma.link.findUnique
     * @example
     * // Get one Link
     * const link = await prisma.link.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueLinkArgs>(
      args: Subset<T, FindUniqueLinkArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link | null>, Prisma__LinkClient<LinkGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyLinkArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateLinkArgs>(args: Subset<T, AggregateLinkArgs>): Promise<GetLinkAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Link.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LinkClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Link findUnique
   */
  export type FindUniqueLinkArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: LinkSelect | null
    /**
     * Filter, which Link to fetch.
    **/
    where: LinkWhereUniqueInput
  }


  /**
   * Link findFirst
   */
  export type FindFirstLinkArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: LinkSelect | null
    /**
     * Filter, which Link to fetch.
    **/
    where?: LinkWhereInput
    orderBy?: Enumerable<LinkOrderByInput>
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LinkScalarFieldEnum>
  }


  /**
   * Link findMany
   */
  export type FindManyLinkArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: LinkSelect | null
    /**
     * Filter, which Links to fetch.
    **/
    where?: LinkWhereInput
    /**
     * Determine the order of the Links to fetch.
    **/
    orderBy?: Enumerable<LinkOrderByInput>
    /**
     * Sets the position for listing Links.
    **/
    cursor?: LinkWhereUniqueInput
    /**
     * The number of Links to fetch. If negative number, it will take Links before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Links.
    **/
    skip?: number
    distinct?: Enumerable<LinkScalarFieldEnum>
  }


  /**
   * Link create
   */
  export type LinkCreateArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: LinkSelect | null
    /**
     * The data needed to create a Link.
    **/
    data: LinkCreateInput
  }


  /**
   * Link update
   */
  export type LinkUpdateArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: LinkSelect | null
    /**
     * The data needed to update a Link.
    **/
    data: LinkUpdateInput
    /**
     * Choose, which Link to update.
    **/
    where: LinkWhereUniqueInput
  }


  /**
   * Link updateMany
   */
  export type LinkUpdateManyArgs = {
    data: LinkUpdateManyMutationInput
    where?: LinkWhereInput
  }


  /**
   * Link upsert
   */
  export type LinkUpsertArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: LinkSelect | null
    /**
     * The filter to search for the Link to update in case it exists.
    **/
    where: LinkWhereUniqueInput
    /**
     * In case the Link found by the `where` argument doesn't exist, create a new Link with this data.
    **/
    create: LinkCreateInput
    /**
     * In case the Link was found with the provided `where` argument, update it with this data.
    **/
    update: LinkUpdateInput
  }


  /**
   * Link delete
   */
  export type LinkDeleteArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: LinkSelect | null
    /**
     * Filter which Link to delete.
    **/
    where: LinkWhereUniqueInput
  }


  /**
   * Link deleteMany
   */
  export type LinkDeleteManyArgs = {
    where?: LinkWhereInput
  }


  /**
   * Link without action
   */
  export type LinkArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: LinkSelect | null
  }



  /**
   * Model Note
   */


  export type AggregateNote = {
    count: number | null
    avg: NoteAvgAggregateOutputType | null
    sum: NoteSumAggregateOutputType | null
    min: NoteMinAggregateOutputType | null
    max: NoteMaxAggregateOutputType | null
  }

  export type NoteAvgAggregateOutputType = {
    id: number
  }

  export type NoteSumAggregateOutputType = {
    id: number
  }

  export type NoteMinAggregateOutputType = {
    id: number
    body: string | null
    tag: string | null
    time: Date | null
  }

  export type NoteMaxAggregateOutputType = {
    id: number
    body: string | null
    tag: string | null
    time: Date | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    body: number | null
    tag: number | null
    time: number | null
    _all: number
  }


  export type NoteAvgAggregateInputType = {
    id?: true
  }

  export type NoteSumAggregateInputType = {
    id?: true
  }

  export type NoteMinAggregateInputType = {
    id?: true
    body?: true
    tag?: true
    time?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    body?: true
    tag?: true
    time?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    body?: true
    tag?: true
    time?: true
    _all?: true
  }

  export type AggregateNoteArgs = {
    where?: NoteWhereInput
    orderBy?: Enumerable<NoteOrderByInput>
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: NoteAvgAggregateInputType
    sum?: NoteSumAggregateInputType
    min?: NoteMinAggregateInputType
    max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends AggregateNoteArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetNoteAggregateScalarType<T[P]>
  }

  export type GetNoteAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof NoteAvgAggregateOutputType ? NoteAvgAggregateOutputType[P] : never
  }

    



  export type NoteSelect = {
    id?: boolean
    body?: boolean
    tag?: boolean
    time?: boolean
  }

  export type NoteGetPayload<
    S extends boolean | null | undefined | NoteArgs,
    U = keyof S
      > = S extends true
        ? Note
    : S extends undefined
    ? never
    : S extends NoteArgs | FindManyNoteArgs
    ?'include' extends U
    ? Note 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Note ?Note [P]
  : 
     never
  } 
    : Note
  : Note


  export interface NoteDelegate {
    /**
     * Find zero or one Note that matches the filter.
     * @param {FindUniqueNoteArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueNoteArgs>(
      args: Subset<T, FindUniqueNoteArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note | null>, Prisma__NoteClient<NoteGetPayload<T> | null>>
    /**
     * Find the first Note that matches the filter.
     * @param {FindFirstNoteArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstNoteArgs>(
      args?: Subset<T, FindFirstNoteArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note | null>, Prisma__NoteClient<NoteGetPayload<T> | null>>
    /**
     * Find zero or more Notes that matches the filter.
     * @param {FindManyNoteArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyNoteArgs>(
      args?: Subset<T, FindManyNoteArgs>
    ): CheckSelect<T, Promise<Array<Note>>, Promise<Array<NoteGetPayload<T>>>>
    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
    **/
    create<T extends NoteCreateArgs>(
      args: Subset<T, NoteCreateArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>
    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
    **/
    delete<T extends NoteDeleteArgs>(
      args: Subset<T, NoteDeleteArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>
    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoteUpdateArgs>(
      args: Subset<T, NoteUpdateArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>
    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoteDeleteManyArgs>(
      args?: Subset<T, NoteDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Notes.
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoteUpdateManyArgs>(
      args: Subset<T, NoteUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
    **/
    upsert<T extends NoteUpsertArgs>(
      args: Subset<T, NoteUpsertArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>
    /**
     * Find zero or one Note that matches the filter.
     * @param {FindUniqueNoteArgs} args - Arguments to find a Note
     * @deprecated This will be deprecated please use prisma.note.findUnique
     * @example
     * // Get one Note
     * const note = await prisma.note.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueNoteArgs>(
      args: Subset<T, FindUniqueNoteArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note | null>, Prisma__NoteClient<NoteGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyNoteArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateNoteArgs>(args: Subset<T, AggregateNoteArgs>): Promise<GetNoteAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NoteClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Note findUnique
   */
  export type FindUniqueNoteArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Filter, which Note to fetch.
    **/
    where: NoteWhereUniqueInput
  }


  /**
   * Note findFirst
   */
  export type FindFirstNoteArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Filter, which Note to fetch.
    **/
    where?: NoteWhereInput
    orderBy?: Enumerable<NoteOrderByInput>
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NoteScalarFieldEnum>
  }


  /**
   * Note findMany
   */
  export type FindManyNoteArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Filter, which Notes to fetch.
    **/
    where?: NoteWhereInput
    /**
     * Determine the order of the Notes to fetch.
    **/
    orderBy?: Enumerable<NoteOrderByInput>
    /**
     * Sets the position for listing Notes.
    **/
    cursor?: NoteWhereUniqueInput
    /**
     * The number of Notes to fetch. If negative number, it will take Notes before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Notes.
    **/
    skip?: number
    distinct?: Enumerable<NoteScalarFieldEnum>
  }


  /**
   * Note create
   */
  export type NoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * The data needed to create a Note.
    **/
    data: NoteCreateInput
  }


  /**
   * Note update
   */
  export type NoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * The data needed to update a Note.
    **/
    data: NoteUpdateInput
    /**
     * Choose, which Note to update.
    **/
    where: NoteWhereUniqueInput
  }


  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs = {
    data: NoteUpdateManyMutationInput
    where?: NoteWhereInput
  }


  /**
   * Note upsert
   */
  export type NoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * The filter to search for the Note to update in case it exists.
    **/
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
    **/
    create: NoteCreateInput
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
    **/
    update: NoteUpdateInput
  }


  /**
   * Note delete
   */
  export type NoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Filter which Note to delete.
    **/
    where: NoteWhereUniqueInput
  }


  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs = {
    where?: NoteWhereInput
  }


  /**
   * Note without action
   */
  export type NoteArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const LinkScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    description: 'description',
    url: 'url'
  };

  export type LinkScalarFieldEnum = (typeof LinkScalarFieldEnum)[keyof typeof LinkScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    body: 'body',
    tag: 'tag',
    time: 'time'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type LinkWhereInput = {
    AND?: Enumerable<LinkWhereInput>
    OR?: Enumerable<LinkWhereInput>
    NOT?: Enumerable<LinkWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    description?: StringFilter | string
    url?: StringFilter | string
  }

  export type LinkOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    description?: SortOrder
    url?: SortOrder
  }

  export type LinkWhereUniqueInput = {
    id?: number
  }

  export type NoteWhereInput = {
    AND?: Enumerable<NoteWhereInput>
    OR?: Enumerable<NoteWhereInput>
    NOT?: Enumerable<NoteWhereInput>
    id?: IntFilter | number
    body?: StringFilter | string
    tag?: StringFilter | string
    time?: DateTimeFilter | Date | string
  }

  export type NoteOrderByInput = {
    id?: SortOrder
    body?: SortOrder
    tag?: SortOrder
    time?: SortOrder
  }

  export type NoteWhereUniqueInput = {
    id?: number
  }

  export type LinkCreateInput = {
    createdAt?: Date | string
    description: string
    url: string
  }

  export type LinkUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type LinkUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateInput = {
    body: string
    tag: string
    time?: Date | string
  }

  export type NoteUpdateInput = {
    body?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUpdateManyMutationInput = {
    body?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.LinkScalarFieldEnum`
 */
export type LinkScalarFieldEnum = Prisma.LinkScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.NoteScalarFieldEnum`
 */
export type NoteScalarFieldEnum = Prisma.NoteScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateLink`
 */
export type AggregateLink = Prisma.AggregateLink

/**
 * @deprecated Renamed to `Prisma.LinkAvgAggregateOutputType`
 */
export type LinkAvgAggregateOutputType = Prisma.LinkAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LinkSumAggregateOutputType`
 */
export type LinkSumAggregateOutputType = Prisma.LinkSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LinkMinAggregateOutputType`
 */
export type LinkMinAggregateOutputType = Prisma.LinkMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LinkMaxAggregateOutputType`
 */
export type LinkMaxAggregateOutputType = Prisma.LinkMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LinkCountAggregateOutputType`
 */
export type LinkCountAggregateOutputType = Prisma.LinkCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateLinkArgs`
 */
export type AggregateLinkArgs = Prisma.AggregateLinkArgs

/**
 * @deprecated Renamed to `Prisma.LinkAvgAggregateInputType`
 */
export type LinkAvgAggregateInputType = Prisma.LinkAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LinkSumAggregateInputType`
 */
export type LinkSumAggregateInputType = Prisma.LinkSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LinkMinAggregateInputType`
 */
export type LinkMinAggregateInputType = Prisma.LinkMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LinkMaxAggregateInputType`
 */
export type LinkMaxAggregateInputType = Prisma.LinkMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LinkCountAggregateInputType`
 */
export type LinkCountAggregateInputType = Prisma.LinkCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LinkSelect`
 */
export type LinkSelect = Prisma.LinkSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueLinkArgs`
 */
export type FindUniqueLinkArgs = Prisma.FindUniqueLinkArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstLinkArgs`
 */
export type FindFirstLinkArgs = Prisma.FindFirstLinkArgs

/**
 * @deprecated Renamed to `Prisma.FindManyLinkArgs`
 */
export type FindManyLinkArgs = Prisma.FindManyLinkArgs

/**
 * @deprecated Renamed to `Prisma.LinkCreateArgs`
 */
export type LinkCreateArgs = Prisma.LinkCreateArgs

/**
 * @deprecated Renamed to `Prisma.LinkUpdateArgs`
 */
export type LinkUpdateArgs = Prisma.LinkUpdateArgs

/**
 * @deprecated Renamed to `Prisma.LinkUpdateManyArgs`
 */
export type LinkUpdateManyArgs = Prisma.LinkUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.LinkUpsertArgs`
 */
export type LinkUpsertArgs = Prisma.LinkUpsertArgs

/**
 * @deprecated Renamed to `Prisma.LinkDeleteArgs`
 */
export type LinkDeleteArgs = Prisma.LinkDeleteArgs

/**
 * @deprecated Renamed to `Prisma.LinkDeleteManyArgs`
 */
export type LinkDeleteManyArgs = Prisma.LinkDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateNote`
 */
export type AggregateNote = Prisma.AggregateNote

/**
 * @deprecated Renamed to `Prisma.NoteAvgAggregateOutputType`
 */
export type NoteAvgAggregateOutputType = Prisma.NoteAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.NoteSumAggregateOutputType`
 */
export type NoteSumAggregateOutputType = Prisma.NoteSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.NoteMinAggregateOutputType`
 */
export type NoteMinAggregateOutputType = Prisma.NoteMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.NoteMaxAggregateOutputType`
 */
export type NoteMaxAggregateOutputType = Prisma.NoteMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.NoteCountAggregateOutputType`
 */
export type NoteCountAggregateOutputType = Prisma.NoteCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateNoteArgs`
 */
export type AggregateNoteArgs = Prisma.AggregateNoteArgs

/**
 * @deprecated Renamed to `Prisma.NoteAvgAggregateInputType`
 */
export type NoteAvgAggregateInputType = Prisma.NoteAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.NoteSumAggregateInputType`
 */
export type NoteSumAggregateInputType = Prisma.NoteSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.NoteMinAggregateInputType`
 */
export type NoteMinAggregateInputType = Prisma.NoteMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.NoteMaxAggregateInputType`
 */
export type NoteMaxAggregateInputType = Prisma.NoteMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.NoteCountAggregateInputType`
 */
export type NoteCountAggregateInputType = Prisma.NoteCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.NoteSelect`
 */
export type NoteSelect = Prisma.NoteSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueNoteArgs`
 */
export type FindUniqueNoteArgs = Prisma.FindUniqueNoteArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstNoteArgs`
 */
export type FindFirstNoteArgs = Prisma.FindFirstNoteArgs

/**
 * @deprecated Renamed to `Prisma.FindManyNoteArgs`
 */
export type FindManyNoteArgs = Prisma.FindManyNoteArgs

/**
 * @deprecated Renamed to `Prisma.NoteCreateArgs`
 */
export type NoteCreateArgs = Prisma.NoteCreateArgs

/**
 * @deprecated Renamed to `Prisma.NoteUpdateArgs`
 */
export type NoteUpdateArgs = Prisma.NoteUpdateArgs

/**
 * @deprecated Renamed to `Prisma.NoteUpdateManyArgs`
 */
export type NoteUpdateManyArgs = Prisma.NoteUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.NoteUpsertArgs`
 */
export type NoteUpsertArgs = Prisma.NoteUpsertArgs

/**
 * @deprecated Renamed to `Prisma.NoteDeleteArgs`
 */
export type NoteDeleteArgs = Prisma.NoteDeleteArgs

/**
 * @deprecated Renamed to `Prisma.NoteDeleteManyArgs`
 */
export type NoteDeleteManyArgs = Prisma.NoteDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.LinkWhereInput`
 */
export type LinkWhereInput = Prisma.LinkWhereInput

/**
 * @deprecated Renamed to `Prisma.LinkOrderByInput`
 */
export type LinkOrderByInput = Prisma.LinkOrderByInput

/**
 * @deprecated Renamed to `Prisma.LinkWhereUniqueInput`
 */
export type LinkWhereUniqueInput = Prisma.LinkWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.NoteWhereInput`
 */
export type NoteWhereInput = Prisma.NoteWhereInput

/**
 * @deprecated Renamed to `Prisma.NoteOrderByInput`
 */
export type NoteOrderByInput = Prisma.NoteOrderByInput

/**
 * @deprecated Renamed to `Prisma.NoteWhereUniqueInput`
 */
export type NoteWhereUniqueInput = Prisma.NoteWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.LinkCreateInput`
 */
export type LinkCreateInput = Prisma.LinkCreateInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateInput`
 */
export type LinkUpdateInput = Prisma.LinkUpdateInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateManyMutationInput`
 */
export type LinkUpdateManyMutationInput = Prisma.LinkUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.NoteCreateInput`
 */
export type NoteCreateInput = Prisma.NoteCreateInput

/**
 * @deprecated Renamed to `Prisma.NoteUpdateInput`
 */
export type NoteUpdateInput = Prisma.NoteUpdateInput

/**
 * @deprecated Renamed to `Prisma.NoteUpdateManyMutationInput`
 */
export type NoteUpdateManyMutationInput = Prisma.NoteUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter